#! /bin/bash
#This runs a graphical terminal full screen to connect to the tmux sessions that run the login prompt

. /usr/bin/wlruntime_vars &> /dev/null

EmulatedTTY=$1
export HOME=/etc/vtty-config

which tmux &> /dev/null
if [[ $? != 0 ]]
then
  echo "tmux not installed"
  exit 1
fi

which vte &> /dev/null
if [[ $? != 0 ]]
then
  echo "vte not installed"
  exit 1
fi

which cage &> /dev/null
if [[ $? != 0 ]]
then
  echo "cage not installed"
  exit 1
fi


#if vttydisable is specified on the boot command line, fall back to legacy gettys
read -r -n 16385 -d $'\r' KernelCommandLine </proc/cmdline
if [[ $KernelCommandLine =~ ([[:space:]]|^)"vttydisable"([[:space:]]|$) ]]
then
  echo "vttydisable specified on the command line. Falling back to default getty"
  exit 1
fi




#Use bash builtin sleep if availible
if [[ -f /usr/lib/bash/sleep ]]
then
  enable -f /usr/lib/bash/sleep sleep
  SLEEPCMD=\sleep
else
  SLEEPCMD=/bin/sleep
fi


#The autovt for tty1 starts automatically, and tty1 doesn't work with autovt
#Only start once the actual TTY is active, as otherwise it can conflict with a display server
read -r -t 4 -n5 ActiveTTY < /sys/class/tty/tty0/active
if [[ $ActiveTTY != $EmulatedTTY ]]
then
  while [[ $ActiveTTY != $EmulatedTTY ]]
  do
    read -r -t 4 -n5 ActiveTTY < /sys/class/tty/tty0/active
    $SLEEPCMD 1
  done
fi
cage -d -s -- \
vte --no-context-menu --no-builtin-dingus --reverse --font=10 --no-hyperlink --cursor-shape=underline --blink=always --encoding=utf8 --scrollback-lines=10000 --no-scrollbar --no-titlebar -- \
tmux -2u -f /etc/vtty-config/tmux.conf -S /run/vtty/$EmulatedTTY/tmuxsocket attach -t vtty &
FRONTENDPID=$!
trap 'kill -15 $FRONTENDPID' 15
wait $FRONTENDPID

exit 0
